{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","App","state","long","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,iBACNC,SAAU,eA4BHE,EAfO,SAACC,GAEnB,IAXeC,EAAKC,EAWdC,GAXSF,EAWUD,EAAMC,KAXXC,GAWgB,IAAIE,MAAOC,YAVnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAKH,EAGFP,EAAaS,GAAhCP,EAHqB,EAGrBA,KAAMC,EAHe,EAGfA,SAGd,OAAO,yBAAKS,UAAS,yBAAqBH,IACtC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC7BdU,EAAS,SAACP,GACZ,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBACVN,EAAMQ,WAMvBD,EAAOE,aAAe,CAClBD,QAAS,cAIED,QCdTG,E,4MAEFC,MAAQ,CAACV,IAAK,KAAMW,KAAM,KAAMC,aAAc,I,kEAEzB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAClB,IAAKiB,EAASE,OAAOC,SAAUT,KAAMM,EAASE,OAAOE,eAChF,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAACN,aAAcU,EAAIf,e,sCAKhD,OAAIgB,KAAKb,MAAME,eAAiBW,KAAKb,MAAMV,IAChC,uCAAauB,KAAKb,MAAME,eAE9BW,KAAKb,MAAME,cAAgBW,KAAKb,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGnC,kBAAC,EAAD,CAAQO,QAAQ,qC,+BAKnB,OACI,yBAAKF,UAAU,cACVkB,KAAKC,qB,GA1BJC,IAAMC,WAiCxBC,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.6fd6105f.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react'\n\n\nconst seasonConfig = {\n    summer: {\n        text: 'Let\\'s hit the beach!',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Brr it is cold',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    } else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n\n};\n\nconst SeasonDisplay = (props) => {\n        \n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    \n    return <div className ={`season-display ${season}`}>   \n        <i className={`icon-left massive ${iconName} icon`} />\n        <h1>{text}</h1>\n        <i className={`icon-right massive ${iconName} icon`} />\n    </div>;\n\n};\n\n\nexport default SeasonDisplay;","import React from 'react';\n\n\n\nconst Loader = (props) => {\n    return (\n        <div className='ui active dimmer'>\n            <div className='ui big text loader'>\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nLoader.defaultProps = {\n    message: 'Loading...'\n}\n\n\nexport default Loader;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Loader from './Loader';\n\nclass App extends React.Component {\n    \n    state = {lat: null, long: null, errorMessage: ''};\n\n    componentDidMount() {\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({lat: position.coords.latitude, long: position.coords.longitude}), \n            err => this.setState({errorMessage: err.message}) \n        ); \n    }\n\nrenderContent() { //helper function \n    if (this.state.errorMessage && !this.state.lat) {\n        return <div>Error: {this.state.errorMessage}</div>\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n        return <SeasonDisplay lat={this.state.lat}/>   \n    }\n    \n    return <Loader message='Please accept location request'/>;  \n\n}\n    \n    render() {         \n        return (\n            <div className='border red'>\n                {this.renderContent()}\n            </div>\n        )\n    } \n}\n\n\nReactDOM.render(\n<App />,\ndocument.querySelector('#root')\n\n);"],"sourceRoot":""}